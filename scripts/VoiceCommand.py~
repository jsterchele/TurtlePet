#!/usr/bin/env python

"""
VoiceTeleop.py is a demo of speech recognition.
  You can control a mobile base using commands found
  in the corpus file.
Some code came from the GuideBot -> https://github.com/kenwayc/GuideBot
"""


#import roslib; roslib.load_manifest('turtlepet')
#import roslib; roslib.load_manifest('sound_play')
import rospy
import math
import random
import time
import os
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from std_msgs.msg import String
from sound_play.libsoundplay import SoundClient

seq = ['/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/spd.wav', '/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/vic.wav', '/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/pom.wav', '/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/bmtl.wav']

wander = False
follow = False

class voice_cmd_vel:

    #init function
    def __init__(self):
        rospy.on_shutdown(self.cleanup)
	self.paused = False
        #Default Speed
        self.speed = 0.25
	self.msg = Twist()
        self.sound_client = SoundClient()        
        rospy.sleep(2)        

        # publish to cmd_vel, subscribe to speech output
        self.pub = rospy.Publisher('mobile_base/commands/velocity', Twist)
        rospy.Subscriber('recognizer/output', String, self.speechCb)
        rospy.Subscriber('scan', LaserScan, self.callback)
        
        r = rospy.Rate(10.0)
        while not rospy.is_shutdown():
            self.pub.publish(self.msg)
            r.sleep()
        rospy.init_node('play_sound_file')
       
    def callback(self, data):
	global wander
	global follow	
	if wander is True and follow is False:
            distance = .7
            # If a point in the range is less than a distance determined in the cmd line input, stop moving forward and turn until you can resume forward motion - at which point stop turning.
            midIndex = len(data.ranges)/2
            topIndex = int(math.ceil(midIndex + midIndex * .2))
            btmIndex = int(math.floor(midIndex - midIndex * .2))
            data.ranges = data.ranges[btmIndex:topIndex]
            no_nans = [n for n in data.ranges if not math.isnan(n)]
            rospy.loginfo(min(no_nans))
            if min(no_nans) < distance:
                self.msg.linear.x = 0
                self.msg.angular.z = .5
            else:
                self.msg.linear.x = self.speed
                self.msg.angular.z = 0
            
            # Loop at 10Hz, publishing movement commands until we shut down.
            rate = rospy.Rate(10)
            while not rospy.is_shutdown():
                self.pubz.publish(self.msg)
                rate.sleep()

	elif wander is False and follow is True:
	    rospy.loginfo("Following? ")
	    rospy.loginfo(follow)
            followDistance = 2
            stopDistance = 0.6
   	    max_speed = .2
            min_speed = .01
            # How close should we get to things, and what are our speeds?
            self.stopDistance = stopDistance
            self.max_speed = max_speed
            self.min_speed = min_speed
	    #at what distance do we start following something/someone?
	    self.followDist = followDistance

	    #the distance to the closest object, and its position in array, respectively.
	    self.closest = 0
	    self.position = 0
            # Create a Twist message, and fill in the fields.  We're also
            # going to fill in the linear.x field, even though we think
            # we're going to set it later, just to be sure we know its
            # value.
            self.msg = Twist()	
            self.msg.linear.x = 0.0
            self.msg.linear.y = 0.0
            self.msg.linear.z = 0.0
            self.msg.angular.x = 0.0
            self.msg.angular.y = 0.0
            self.msg.angular.z = 0.0
	    self.getPosition(data)
	    rospy.logdebug('position: {0}'.format(self.position))
	
       	    #if there's something within self.followDist from us, start following.
	    if (self.closest < self.followDist):
		rospy.loginfo("ABCD")
                self.follow()	
	    #else just don't run at all.	
	    else:
	        self.stop() 

            # Add a log message, so that we know what's going on
            rospy.loginfo('Distance: {0}, speed: {1}, angular: {2}'.format(self.closest, self.msg.linear.x, self.msg.angular.z))
	    #Ensure we have only one publish command.
            # Loop at 10Hz, publishing movement commands until we shut down.
            rate = rospy.Rate(10)
            while not rospy.is_shutdown():
                self.pubz.publish(self.msg)
                rate.sleep()

	    

    #speech callback function    
    def speechCb(self, msg):
        global wander
        global follow
        rospy.loginfo(msg.data)
	# spin command
        if msg.data.find("spin left") > -1 :
            if self.msg.linear.x != 0:
                if self.msg.angular.z < self.speed:
                    self.msg.angular.z = 2.3	
            else:        
                self.msg.angular.z = 2.3

        elif msg.data.find("spin right") > -1 :
            if self.msg.linear.x != 0:
                if self.msg.angular.z < self.speed:
                    self.msg.angular.z = - 2.3	
            else:        
                self.msg.angular.z = - 2.3

        elif msg.data.find("spin") > -1 :
            if self.msg.linear.x != 0:
                if self.msg.angular.z < self.speed:
                    self.msg.angular.z = 2.3	
            else:        
                self.msg.angular.z = 2.3

        elif msg.data.find("speak") > -1 : 
            self.sound_client.playWave('/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/dog_bark3.wav')

        elif msg.data.find("sing") > -1 : 
            c = random.choice(seq)
            rospy.loginfo(c)
            self.sound_client.playWave(c)

        elif msg.data.find("lay down") > -1 :
	    self.sound_client.playWave('/home/local/CORNELL-COLLEGE/jsterchele17/catkin_ws/src/turtlepet/sounds/low_battery.wav')


	#These following commmands are movement commands.
	#moves forward
        elif msg.data.find("move forward") > -1 or msg.data.find("go forward") > -1 :    
            self.msg.linear.x = self.speed
            self.msg.angular.z = 0
	
        # rotates to the left      
	elif msg.data.find("rotate left") > -1 or msg.data.find("turn left") > -1:
            if self.msg.linear.x != 0:
                if self.msg.angular.z < self.speed:
                    self.msg.angular.z = 0.6	
            else:        
                self.msg.angular.z = 0.8 
	# rotates to the right
        elif msg.data.find("rotate right") > -1 or msg.data.find("turn right") > -1:    
            if self.msg.linear.x != 0:
                if self.msg.angular.z > -self.speed:
                    self.msg.angular.z = - 0.6
            else:        
                self.msg.angular.z = - 0.8 
	# Moves to the left
	elif msg.data.find("move left") > -1 or msg.data.find("go left") > -1:
            if self.msg.linear.x != 0:
                if self.msg.angular.z < self.speed:
                    self.msg.angular.z = 0.6	
            else:        
                self.msg.angular.z = 0.8 
	
	# Moves to the right	
	elif msg.data.find("move right") > -1 or msg.data.find("go right") > -1:
            if self.msg.linear.x != 0:
                if self.msg.angular.z > -self.speed:
                    self.msg.angular.z = -0.6	
            else:        
                self.msg.angular.z = -0.8 

	# Moves backwards
        elif msg.data.find("move back") > -1 or msg.data.find("go back") > -1:
            self.msg.linear.x = -self.speed
            self.msg.angular.z = 0

        # Stops the robot	
	elif msg.data.find("stop") > -1: 
            wander = False
	    follow = False         
            self.msg = Twist()

	# Follow code
	elif msg.data.find("follow") > -1 :
            follow = True

	# Wander code
        elif msg.data.find("wander") > -1 or msg.data.find("roam") > -1:
	    wander = True

        # strafe left or right- uses while loop for time lag 	
        if self.msg.angular.z != 0 and (msg.data.find("move left") > -1 or msg.data.find("move right") > -1 or msg.data.find("go left") > -1 or msg.data.find("go right") > -1):
                #turn 90 degrees to the left or right
				
                ang_vel = self.msg.angular.z
                # rotate		
                self.pub.publish(self.msg)
                count = time.time()
                while time.time() - count < 3.9:
                        rospy.loginfo(time.time() - count)
		
                # stop 	
                self.msg = Twist()	
                self.pub.publish(self.msg)
		
                # move forward		
                count = time.time()
                self.msg.linear.x = self.speed
                self.pub.publish(self.msg)
                while time.time() - count < 2.4:
                        rospy.loginfo(time.time() - count)
		
                # stop message	
                self.msg = Twist()	
                self.pub.publish(self.msg)


                #rotate 90 degrees to in the opposite direction of the previous turn
                self.msg.angular.z = -ang_vel
                self.pub.publish(self.msg)
                count = time.time()
                while time.time() - count < 3.9:
                        rospy.loginfo(time.time() - count)
                # stop message	
                self.msg = Twist()	
                self.pub.publish(self.msg)

           # rospy.sleep(math.pi/(2*self.msg.angular.z))
		
        # rotate right or left	
        elif self.msg.angular.z != 0:
                #turn 90 degrees to the left or right
                count = time.time()		
                self.pub.publish(self.msg)
                while time.time() - count < 3.9:
                        rospy.loginfo(time.time() - count)
		
                # stop message	
                self.msg = Twist()	
                self.pub.publish(self.msg)
			
        else:
            self.pub.publish(self.msg)	
            self.cleanup


    def cleanup(self):
        # Stops the robot from moving
        twist = Twist()
        self.pub.publish(twist)

    #Starts following the nearest object.
    def follow(self):
        rospy.loginfo("I IS FOLLOWINGS")
        self.msg.linear.x = math.tanh(5 * (self.closest - self.stopDistance)) * self.max_speed
	#turn faster the further we're turned from our intended object.
	self.msg.angular.z = ((self.position-320.0)/320.0)
	
	#if we're going slower than our min_speed, just stop.
	if abs(self.msg.linear.x) < self.min_speed:
    	    self.msg.linear.x = 0.0  

    def stop(self):
        self.msg.linear.x = 0.0
        self.msg.angular.z = 0.0
      	#function to occupy self.closest and self.position

    def getPosition(self, scan):
        # Build a depths array to rid ourselves of any nan data inherent in scan.ranges.
        depths = []
        for dist in scan.ranges:
            if not np.isnan(dist):
		depths.append(dist)
                #scan.ranges is a tuple, and we want an array.
                fullDepthsArray = scan.ranges[:]

        #If depths is empty that means we're way too close to an object to get a reading.
        #thus establish our distance/position to nearest object as "0".
        if len(depths) == 0:
            self.closest = 0
            self.position = 0
        else:
            self.closest = min(depths)
            self.position = fullDepthsArray.index(self.closest)	





if __name__=="__main__":
    rospy.init_node('voice_cmd_vel')

    try:
    	voice_cmd_vel()
    	
    except:
        pass
	


